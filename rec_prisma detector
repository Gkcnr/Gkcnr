import numpy as np
import matplotlib.pyplot as plt
import openmc
import pandas as pd
import os


cesium_iodide = openmc.Material()
cesium_iodide.add_element('Cs', 1)
cesium_iodide.add_element('I', 1)                  
cesium_iodide.set_density('g/cm3', 4.51) 
air = openmc.Material()
air.add_element('N', 4)
air.add_nuclide('O16', 1)           
air.temperature = 300        
air.set_density('g/cm3', 0.000000000000000000001)    
materials = openmc.Materials([cesium_iodide,air])
materials.cross_section='C:/Users/Gokcenur/endfb71_hdf5/cross_sections.xml'
materials.export_to_xml()
materials = openmc.Materials()
materials +=[cesium_iodide]
isinstance(materials, list)  

xmin=openmc.XPlane(x0=11,boundary_type="periodic")

xmax = openmc.XPlane(x0=-11,boundary_type="periodic")

ymin = openmc.YPlane(y0=5,boundary_type="periodic")


ymax = openmc.YPlane (y0=-5,boundary_type="periodic")
xmax.periodic_surface = xmin
ymin.periodic_surface = ymax


zmin = openmc.ZPlane(z0=2,boundary_type="periodic")

zmax = openmc.ZPlane(z0=-2,boundary_type="periodic")
zmax.periodic_surface=zmin
mats = openmc.Materials((cesium_iodide,))
region1 = +xmax &- xmin & +ymax  &-ymin & +zmax &-zmin 
cube = openmc.Cell(region=region1)
cube.fill = cesium_iodide

sphere_1 = openmc.Sphere(r=100)

sphere_2 = openmc.Sphere(r=101, boundary_type='vacuum')
sphere_1_region = -sphere_1
sphere_1_cell = openmc.Cell(
    region= sphere_1_region
    & ~region1
)
sphere_1.fill = air
sphere_2_region = +sphere_1 & -sphere_2
sphere_2_cell = openmc.Cell(region= sphere_2_region)
sphere_2.fill = air

universe = openmc.Universe(
    cells=[cube,sphere_1_cell, sphere_2_cell])
universe.plot(width = (30.0,30.0),basis = 'xz')

geometry = openmc.Geometry(universe)             
geometry.export_to_xml() 

##makes the 3d "cube" style geometry
#vox_plot = openmc.Plot()
#vox_plot.type = 'voxel'
#vox_plot.width = (15., 15., 15.)
#vox_plot.pixels = (20, 20, 20)
#vox_plot.filename = 'detector'

#plots = openmc.Plots([vox_plot])
#plots.export_to_xml()

#openmc.plot_geometry()
#os.system('openmc-voxel-to-vtk detector.h5 -o detector.vti')
#from IPython.display import FileLink
#display(FileLink('detector.vti'))

source = openmc.Source()
source.space = openmc.stats.Point((0, 0, 10))
source.angle = openmc.stats.Isotropic()
# This is a Co60 source, see the task on sources to understand it
source.energy = openmc.stats.Discrete([1.1732e6,1.3325e6], [0.5, 0.5])
source.particle = 'photon'


#source_extraction_utils file
#create_inital_particles(
  #  source,
   # number_of_particles=1000  # this can be increased to sample more particles
#)

#plot_energy_from_initial_source(
   # input_filename='initial_source.h5',
    #energy_bins=np.linspace(0, 2e6, 50)

#)

settings = openmc.Settings()
settings.run_mode = 'fixed source'
settings.source = source
settings.batches = 6
settings.particles = 100000
settings.export_to_xml()
number_bins = 101
bins_both = np.linspace(0, 1e6, number_bins)

tallies = openmc.Tallies()
cell_filter = openmc.CellFilter(cube)
energy_filter = openmc.EnergyFilter(bins_both)

tally = openmc.Tally(name='flux')
tally.filters = [cell_filter, energy_filter]
tally.scores = ['flux']
tallies.append(tally)

# combine all the required parts to make a model
model = openmc.model.Model(geometry, materials, settings, tallies)

# remove old files and runs OpenMC
!rm *.h5
results_filename = model.run()
